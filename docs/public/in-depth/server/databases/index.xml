<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database support :: Datasync Community Toolkit</title>
    <link>http://localhost:1313/Datasync/in-depth/server/databases/index.html</link>
    <description>Database Support Entity Framework Core doesn’t set up value generation for date/time columns. (See Date/time value generation). The default repository for Entity Framework Core automatically updates the UpdatedAt field for you. However, if your database is updated outside of the repository, you must arrange for the UpdatedAt and Version fields to be updated.&#xA;You can find sample implementations of each supported context in our Database Tests.&#xA;For specific database support, see the following:</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/Datasync/in-depth/server/databases/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure Cosmos DB</title>
      <link>http://localhost:1313/Datasync/in-depth/server/databases/cosmos/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Datasync/in-depth/server/databases/cosmos/index.html</guid>
      <description>Azure Cosmos DB Azure Cosmos DB is a fully managed NoSQL database for high-performance applications of any size or scale. See Azure Cosmos DB Provider for information on using Azure Cosmos DB with Entity Framework Core. When using Azure Cosmos DB with the Datasync Community Toolkit:&#xA;Set up the Cosmos Container with a composite index that specifies the UpdatedAt and Id fields. Composite indices can be added to a container through the Azure portal, ARM, Bicep, Terraform, or within code. Here’s an example bicep resource definition:</description>
    </item>
    <item>
      <title>Azure SQL &amp; SQL Server</title>
      <link>http://localhost:1313/Datasync/in-depth/server/databases/azuresql/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Datasync/in-depth/server/databases/azuresql/index.html</guid>
      <description>Azure SQL and SQL Server Create a trigger for each entity:&#xA;CREATE OR ALTER TRIGGER [dbo].[TodoItems_UpdatedAt] ON [dbo].[TodoItems] AFTER INSERT, UPDATE AS BEGIN SET NOCOUNT ON; UPDATE [dbo].[TodoItems] SET [UpdatedAt] = GETUTCDATE() WHERE [Id] IN (SELECT [Id] FROM INSERTED); ENDYou can install this trigger using either a migration or immediately after EnsureCreated() to create the database.&#xA;Test Azure SQL Context</description>
    </item>
    <item>
      <title>In-memory datastore</title>
      <link>http://localhost:1313/Datasync/in-depth/server/databases/in-memory/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Datasync/in-depth/server/databases/in-memory/index.html</guid>
      <description>In-memory data store You can create an in-memory repository with no persistent storage by adding a singleton service for the repository in your Program.cs:&#xA;IEnumerable&lt;Model&gt; seedData = GenerateSeedData(); builder.Services.AddSingleton&lt;IRepository&lt;Model&gt;&gt;(new InMemoryRepository&lt;Model&gt;(seedData));Set up your table controller as follows:&#xA;[Route(&#34;tables/[controller]&#34;)] public class ModelController : TableController&lt;Model&gt; { public MovieController(IRepository&lt;Model&gt; repository) : base(repository) { } }</description>
    </item>
    <item>
      <title>LiteDb</title>
      <link>http://localhost:1313/Datasync/in-depth/server/databases/litedb/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Datasync/in-depth/server/databases/litedb/index.html</guid>
      <description>LiteDB LiteDB is a serverless database delivered in a single small DLL written in .NET C# managed code. It’s a simple and fast NoSQL database solution for stand-alone applications. To use LiteDb with on-disk persistent storage:&#xA;Install the Microsoft.AspNetCore.Datasync.LiteDb package from NuGet.&#xA;Add a singleton for the LiteDatabase to the Program.cs:&#xA;const connectionString = builder.Configuration.GetValue&lt;string&gt;(&#34;LiteDb:ConnectionString&#34;); builder.Services.AddSingleton&lt;LiteDatabase&gt;(new LiteDatabase(connectionString)); Derive models from the LiteDbTableData:&#xA;public class TodoItem : LiteDbTableData { public string Title { get; set; } public bool Completed { get; set; } }You can use any of the BsonMapper attributes that are supplied with the LiteDb NuGet package.</description>
    </item>
    <item>
      <title>PostgreSQL</title>
      <link>http://localhost:1313/Datasync/in-depth/server/databases/postgresql/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Datasync/in-depth/server/databases/postgresql/index.html</guid>
      <description>PostgreSQL Create a trigger for each entity:&#xA;CREATE OR REPLACE FUNCTION entity_datasync() RETURNS trigger AS $$ BEGIN NEW.&#34;UpdatedAt&#34; = NOW() AT TIME ZONE &#39;UTC&#39;; NEW.&#34;Version&#34; = convert_to(gen_random_uuid()::text, &#39;UTF8&#39;); RETURN NEW; END; $$ LANGUAGE plpgsql; CREATE OR REPLACE TRIGGER entity_datasync BEFORE INSERT OR UPDATE ON &#34;entity&#34; FOR EACH ROW EXECUTE PROCEDURE entity_datasync();You can install this trigger using either a migration or immediately after EnsureCreated() to create the database.&#xA;In the OnModelCreating() method of your context, add the following for each entity:&#xA;protected override void OnModelCreating(ModelBuilder modelBuilder) { // Repeat the next line for each synchronizable entity modelBuilder.Entity&lt;Model&gt;().Property(m =&gt; m.UpdatedAt).HasDefaultValueSql(&#34;NOW() AT TIME ZONE &#39;UTC&#39;&#34;); base.OnModelCreating(modelBuilder); } Test PostgreSQL Context</description>
    </item>
    <item>
      <title>Sqlite</title>
      <link>http://localhost:1313/Datasync/in-depth/server/databases/sqlite/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Datasync/in-depth/server/databases/sqlite/index.html</guid>
      <description>SqLite Warning&#xD;Do not use SqLite for production services. SqLite is only suitable for client-side usage in production.&#xA;SqLite doesn’t have a date/time field that supports millisecond accuracy. As such, it isn’t suitable for anything except for testing. If you wish to use SqLite, ensure you implement a value converter and value comparer on each model for date/time properties. The easiest method to implement value converters and comparers is in the OnModelCreating(ModelBuilder) method of your DbContext:</description>
    </item>
  </channel>
</rss>