<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Datasync Community Toolkit</title>
    <link>http://localhost:1313/Datasync/index.html</link>
    <description>A set of .NET libraries for synchronizing data between cloud and device databases.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/Datasync/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started</title>
      <link>http://localhost:1313/Datasync/setup/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Datasync/setup/index.html</guid>
      <description></description>
    </item>
    <item>
      <title>Samples</title>
      <link>http://localhost:1313/Datasync/samples/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Datasync/samples/index.html</guid>
      <description>Samples There are a variety of samples in the samples folder of our repository. You can find a walk-through of the code below.&#xA;Servers A typical server Clients The TodoApp&#xA;The Todo App is a typical data-driven application. We start with data stored in a normal Entity Framework Core DbContext, then modify it to synchronize the data to the remote cloud database.&#xA;AvaloniaUI MAUI Uno Platform WinUI3 WPF</description>
    </item>
    <item>
      <title>In-depth</title>
      <link>http://localhost:1313/Datasync/in-depth/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Datasync/in-depth/index.html</guid>
      <description>Offline data synchronization Offline data synchronization is a useful tool that synchronizes data from a cloud-based database to a Sqlite database stored with your application. When you app is offline, you can still create, modify, and search the data. Data is synchronized when your device is online.&#xA;Offline data synchronization has several benefits:&#xA;Improves app responsiveness Improves app reliability when there is bad network connectivity Limits network use on high-latency or metered networks Supports disconnected use. How does offline sync work? Your client code implements a special Entity Framework Core database context using a Sqlite database. As you make changes to the data within the database context on the local store, each operation is stored in an operations queue. No network communication happens until you push the changes stored in the operations queue to the remote service. Similarly, you pull changes from the remote service to be stored in the local store.</description>
    </item>
  </channel>
</rss>