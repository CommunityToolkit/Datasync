/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/director@1.2.8/test/server/http/http-test.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
var assert=require("assert"),http=require("http"),vows=require("vows"),request=require("request"),director=require("../../../lib/director"),helpers=require("../helpers"),handlers=helpers.handlers,macros=helpers.macros;function assertBark(e){return macros.assertGet(9090,e,"hello from (bark)")}vows.describe("director/http").addBatch({"An instance of director.http.Router":{"instantiated with a Routing table":{topic:new director.http.Router({"/hello":{get:handlers.respondWithId}}),"should have the correct routes defined":function(e){assert.isObject(e.routes.hello),assert.isFunction(e.routes.hello.get)},"when passed to an http.Server instance":{topic:function(e){e.get(/foo\/bar\/(\w+)/,handlers.respondWithId),e.get(/add\/:param\/bark/,handlers.respondWithId),e.get(/foo\/update\/(\w+)/,handlers.respondWithId),e.path(/bar\/bazz\//,(function(){this.get(/(\w+)/,handlers.respondWithId)})),e.get(/\/foo\/wild\/(.*)/,handlers.respondWithId),e.get(/(\/v2)?\/somepath/,handlers.respondWithId),helpers.createServer(e).listen(9090,this.callback)},"a request to foo/bar/bark":assertBark("foo/bar/bark"),"a request to foo/update/bark":assertBark("foo/update/bark"),"a request to bar/bazz/bark":assertBark("bar/bazz/bark"),"a request to foo/bar/bark?test=test":assertBark("foo/bar/bark?test=test"),"a request to foo/wild/bark":assertBark("foo/wild/bark"),"a request to add/:param/bark":{topic:function(){request({uri:"http://localhost:9090/add/test/bark"},this.callback)},"should respond and parse the params":function(e,t,a){assert.isNull(e),assert.equal(t.statusCode,200),assert.equal(a,"hello from (test)")}},"an encoded request to add/:param/bark":{topic:function(){request({uri:"http://localhost:9090/add/something%40example.com/bark"},this.callback)},"should respond and parse the params":function(e,t,a){assert.isNull(e),assert.equal(t.statusCode,200),assert.equal(a,"hello from (something%40example.com)")}},"an encoded request to add/:param/bark with additional special characters":{topic:function(){request({uri:"http://localhost:9090/add/something%40(example).com/bark"},this.callback)},"should respond and parse the params":function(e,t,a){assert.isNull(e),assert.equal(t.statusCode,200),assert.equal(a,"hello from (something%40(example).com)")}},"a request to foo/%RT":macros.assert404(9090,"foo/%RT"),"a request to /v2/somepath":macros.assertGet(9090,"/v2/somepath","hello from (/v2)")}}}}).export(module);
//# sourceMappingURL=/sm/48724bc4d29a116c1188265cbf8378be77013cb64609f9d7198631a7741dab0d.map