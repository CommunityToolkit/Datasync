// <auto-generated />
using System;
using System.Reflection;
using CommunityToolkit.Datasync.Client.Offline;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TodoApp.MAUI.Infrastructure.CompiledModels
{
    internal partial class DatasyncOperationEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "CommunityToolkit.Datasync.Client.Offline.DatasyncOperation",
                typeof(DatasyncOperation),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(string),
                propertyInfo: typeof(DatasyncOperation).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.TypeMapping = SqliteStringTypeMapping.Default;

            var entityType = runtimeEntityType.AddProperty(
                "EntityType",
                typeof(string),
                propertyInfo: typeof(DatasyncOperation).GetProperty("EntityType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<EntityType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 255);
            entityType.TypeMapping = SqliteStringTypeMapping.Default;

            var entityVersion = runtimeEntityType.AddProperty(
                "EntityVersion",
                typeof(string),
                propertyInfo: typeof(DatasyncOperation).GetProperty("EntityVersion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<EntityVersion>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 126);
            entityVersion.TypeMapping = SqliteStringTypeMapping.Default;

            var httpStatusCode = runtimeEntityType.AddProperty(
                "HttpStatusCode",
                typeof(int?),
                propertyInfo: typeof(DatasyncOperation).GetProperty("HttpStatusCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<HttpStatusCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            httpStatusCode.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                keyComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                providerValueComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var item = runtimeEntityType.AddProperty(
                "Item",
                typeof(string),
                propertyInfo: typeof(DatasyncOperation).GetProperty("Item", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<Item>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            item.TypeMapping = SqliteStringTypeMapping.Default;

            var itemId = runtimeEntityType.AddProperty(
                "ItemId",
                typeof(string),
                propertyInfo: typeof(DatasyncOperation).GetProperty("ItemId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<ItemId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 126);
            itemId.TypeMapping = SqliteStringTypeMapping.Default;

            var kind = runtimeEntityType.AddProperty(
                "Kind",
                typeof(OperationKind),
                propertyInfo: typeof(DatasyncOperation).GetProperty("Kind", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<Kind>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            kind.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<OperationKind>(
                    (OperationKind v1, OperationKind v2) => object.Equals((object)v1, (object)v2),
                    (OperationKind v) => v.GetHashCode(),
                    (OperationKind v) => v),
                keyComparer: new ValueComparer<OperationKind>(
                    (OperationKind v1, OperationKind v2) => object.Equals((object)v1, (object)v2),
                    (OperationKind v) => v.GetHashCode(),
                    (OperationKind v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"),
                converter: new ValueConverter<OperationKind, int>(
                    (OperationKind value) => (int)value,
                    (int value) => (OperationKind)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<OperationKind, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<OperationKind, int>(
                        (OperationKind value) => (int)value,
                        (int value) => (OperationKind)value)));
            kind.SetSentinelFromProviderValue(0);

            var lastAttempt = runtimeEntityType.AddProperty(
                "LastAttempt",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(DatasyncOperation).GetProperty("LastAttempt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<LastAttempt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastAttempt.TypeMapping = SqliteDateTimeOffsetTypeMapping.Default;

            var sequence = runtimeEntityType.AddProperty(
                "Sequence",
                typeof(long),
                propertyInfo: typeof(DatasyncOperation).GetProperty("Sequence", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<Sequence>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            sequence.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                keyComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var state = runtimeEntityType.AddProperty(
                "State",
                typeof(OperationState),
                propertyInfo: typeof(DatasyncOperation).GetProperty("State", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<State>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            state.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<OperationState>(
                    (OperationState v1, OperationState v2) => object.Equals((object)v1, (object)v2),
                    (OperationState v) => v.GetHashCode(),
                    (OperationState v) => v),
                keyComparer: new ValueComparer<OperationState>(
                    (OperationState v1, OperationState v2) => object.Equals((object)v1, (object)v2),
                    (OperationState v) => v.GetHashCode(),
                    (OperationState v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"),
                converter: new ValueConverter<OperationState, int>(
                    (OperationState value) => (int)value,
                    (int value) => (OperationState)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<OperationState, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<OperationState, int>(
                        (OperationState value) => (int)value,
                        (int value) => (OperationState)value)));
            state.SetSentinelFromProviderValue(0);

            var version = runtimeEntityType.AddProperty(
                "Version",
                typeof(int),
                propertyInfo: typeof(DatasyncOperation).GetProperty("Version", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DatasyncOperation).GetField("<Version>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            version.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { itemId, entityType });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "DatasyncOperationsQueue");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
