// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TodoApp.MAUI.Infrastructure.CompiledModels
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var datasyncDeltaToken = DatasyncDeltaTokenEntityType.Create(this);
            var datasyncOperation = DatasyncOperationEntityType.Create(this);
            var todoItem = TodoItemEntityType.Create(this);

            DatasyncDeltaTokenEntityType.CreateAnnotations(datasyncDeltaToken);
            DatasyncOperationEntityType.CreateAnnotations(datasyncOperation);
            TodoItemEntityType.CreateAnnotations(todoItem);

            AddAnnotation("ProductVersion", "8.0.10");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var datasyncDeltaToken = FindEntityType("CommunityToolkit.Datasync.Client.Offline.DatasyncDeltaToken")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            datasyncDeltaToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var communityToolkitDatasyncClientOfflineDatasyncDeltaTokenTableBase = new TableBase("CommunityToolkit.Datasync.Client.Offline.DatasyncDeltaToken", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "TEXT", communityToolkitDatasyncClientOfflineDatasyncDeltaTokenTableBase);
            communityToolkitDatasyncClientOfflineDatasyncDeltaTokenTableBase.Columns.Add("Id", idColumnBase);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "INTEGER", communityToolkitDatasyncClientOfflineDatasyncDeltaTokenTableBase);
            communityToolkitDatasyncClientOfflineDatasyncDeltaTokenTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("CommunityToolkit.Datasync.Client.Offline.DatasyncDeltaToken", communityToolkitDatasyncClientOfflineDatasyncDeltaTokenTableBase);
            var communityToolkitDatasyncClientOfflineDatasyncDeltaTokenMappingBase = new TableMappingBase<ColumnMappingBase>(datasyncDeltaToken, communityToolkitDatasyncClientOfflineDatasyncDeltaTokenTableBase, true);
            communityToolkitDatasyncClientOfflineDatasyncDeltaTokenTableBase.AddTypeMapping(communityToolkitDatasyncClientOfflineDatasyncDeltaTokenMappingBase, false);
            defaultTableMappings.Add(communityToolkitDatasyncClientOfflineDatasyncDeltaTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, datasyncDeltaToken.FindProperty("Id")!, communityToolkitDatasyncClientOfflineDatasyncDeltaTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, datasyncDeltaToken.FindProperty("Value")!, communityToolkitDatasyncClientOfflineDatasyncDeltaTokenMappingBase);

            var tableMappings = new List<TableMapping>();
            datasyncDeltaToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var datasyncDeltaTokensTable = new Table("DatasyncDeltaTokens", null, relationalModel);
            var idColumn = new Column("Id", "TEXT", datasyncDeltaTokensTable);
            datasyncDeltaTokensTable.Columns.Add("Id", idColumn);
            var valueColumn = new Column("Value", "INTEGER", datasyncDeltaTokensTable);
            datasyncDeltaTokensTable.Columns.Add("Value", valueColumn);
            var pK_DatasyncDeltaTokens = new UniqueConstraint("PK_DatasyncDeltaTokens", datasyncDeltaTokensTable, new[] { idColumn });
            datasyncDeltaTokensTable.PrimaryKey = pK_DatasyncDeltaTokens;
            var pK_DatasyncDeltaTokensUc = RelationalModel.GetKey(this,
                "CommunityToolkit.Datasync.Client.Offline.DatasyncDeltaToken",
                new[] { "Id" });
            pK_DatasyncDeltaTokens.MappedKeys.Add(pK_DatasyncDeltaTokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DatasyncDeltaTokensUc).Add(pK_DatasyncDeltaTokens);
            datasyncDeltaTokensTable.UniqueConstraints.Add("PK_DatasyncDeltaTokens", pK_DatasyncDeltaTokens);
            relationalModel.Tables.Add(("DatasyncDeltaTokens", null), datasyncDeltaTokensTable);
            var datasyncDeltaTokensTableMapping = new TableMapping(datasyncDeltaToken, datasyncDeltaTokensTable, true);
            datasyncDeltaTokensTable.AddTypeMapping(datasyncDeltaTokensTableMapping, false);
            tableMappings.Add(datasyncDeltaTokensTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, datasyncDeltaToken.FindProperty("Id")!, datasyncDeltaTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, datasyncDeltaToken.FindProperty("Value")!, datasyncDeltaTokensTableMapping);

            var datasyncOperation = FindEntityType("CommunityToolkit.Datasync.Client.Offline.DatasyncOperation")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            datasyncOperation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var communityToolkitDatasyncClientOfflineDatasyncOperationTableBase = new TableBase("CommunityToolkit.Datasync.Client.Offline.DatasyncOperation", null, relationalModel);
            var entityTypeColumnBase = new ColumnBase<ColumnMappingBase>("EntityType", "TEXT", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase);
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("EntityType", entityTypeColumnBase);
            var entityVersionColumnBase = new ColumnBase<ColumnMappingBase>("EntityVersion", "TEXT", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase);
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("EntityVersion", entityVersionColumnBase);
            var httpStatusCodeColumnBase = new ColumnBase<ColumnMappingBase>("HttpStatusCode", "INTEGER", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase)
            {
                IsNullable = true
            };
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("HttpStatusCode", httpStatusCodeColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase);
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("Id", idColumnBase0);
            var itemColumnBase = new ColumnBase<ColumnMappingBase>("Item", "TEXT", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase);
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("Item", itemColumnBase);
            var itemIdColumnBase = new ColumnBase<ColumnMappingBase>("ItemId", "TEXT", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase);
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("ItemId", itemIdColumnBase);
            var kindColumnBase = new ColumnBase<ColumnMappingBase>("Kind", "INTEGER", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase);
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("Kind", kindColumnBase);
            var lastAttemptColumnBase = new ColumnBase<ColumnMappingBase>("LastAttempt", "TEXT", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase)
            {
                IsNullable = true
            };
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("LastAttempt", lastAttemptColumnBase);
            var sequenceColumnBase = new ColumnBase<ColumnMappingBase>("Sequence", "INTEGER", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase);
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("Sequence", sequenceColumnBase);
            var stateColumnBase = new ColumnBase<ColumnMappingBase>("State", "INTEGER", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase);
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("State", stateColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("Version", "INTEGER", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase);
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.Columns.Add("Version", versionColumnBase);
            relationalModel.DefaultTables.Add("CommunityToolkit.Datasync.Client.Offline.DatasyncOperation", communityToolkitDatasyncClientOfflineDatasyncOperationTableBase);
            var communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase = new TableMappingBase<ColumnMappingBase>(datasyncOperation, communityToolkitDatasyncClientOfflineDatasyncOperationTableBase, true);
            communityToolkitDatasyncClientOfflineDatasyncOperationTableBase.AddTypeMapping(communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase, false);
            defaultTableMappings0.Add(communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, datasyncOperation.FindProperty("Id")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)entityTypeColumnBase, datasyncOperation.FindProperty("EntityType")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)entityVersionColumnBase, datasyncOperation.FindProperty("EntityVersion")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)httpStatusCodeColumnBase, datasyncOperation.FindProperty("HttpStatusCode")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)itemColumnBase, datasyncOperation.FindProperty("Item")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)itemIdColumnBase, datasyncOperation.FindProperty("ItemId")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)kindColumnBase, datasyncOperation.FindProperty("Kind")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastAttemptColumnBase, datasyncOperation.FindProperty("LastAttempt")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sequenceColumnBase, datasyncOperation.FindProperty("Sequence")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stateColumnBase, datasyncOperation.FindProperty("State")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, datasyncOperation.FindProperty("Version")!, communityToolkitDatasyncClientOfflineDatasyncOperationMappingBase);

            var tableMappings0 = new List<TableMapping>();
            datasyncOperation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var datasyncOperationsQueueTable = new Table("DatasyncOperationsQueue", null, relationalModel);
            var idColumn0 = new Column("Id", "TEXT", datasyncOperationsQueueTable);
            datasyncOperationsQueueTable.Columns.Add("Id", idColumn0);
            var entityTypeColumn = new Column("EntityType", "TEXT", datasyncOperationsQueueTable);
            datasyncOperationsQueueTable.Columns.Add("EntityType", entityTypeColumn);
            var entityVersionColumn = new Column("EntityVersion", "TEXT", datasyncOperationsQueueTable);
            datasyncOperationsQueueTable.Columns.Add("EntityVersion", entityVersionColumn);
            var httpStatusCodeColumn = new Column("HttpStatusCode", "INTEGER", datasyncOperationsQueueTable)
            {
                IsNullable = true
            };
            datasyncOperationsQueueTable.Columns.Add("HttpStatusCode", httpStatusCodeColumn);
            var itemColumn = new Column("Item", "TEXT", datasyncOperationsQueueTable);
            datasyncOperationsQueueTable.Columns.Add("Item", itemColumn);
            var itemIdColumn = new Column("ItemId", "TEXT", datasyncOperationsQueueTable);
            datasyncOperationsQueueTable.Columns.Add("ItemId", itemIdColumn);
            var kindColumn = new Column("Kind", "INTEGER", datasyncOperationsQueueTable);
            datasyncOperationsQueueTable.Columns.Add("Kind", kindColumn);
            var lastAttemptColumn = new Column("LastAttempt", "TEXT", datasyncOperationsQueueTable)
            {
                IsNullable = true
            };
            datasyncOperationsQueueTable.Columns.Add("LastAttempt", lastAttemptColumn);
            var sequenceColumn = new Column("Sequence", "INTEGER", datasyncOperationsQueueTable);
            datasyncOperationsQueueTable.Columns.Add("Sequence", sequenceColumn);
            var stateColumn = new Column("State", "INTEGER", datasyncOperationsQueueTable);
            datasyncOperationsQueueTable.Columns.Add("State", stateColumn);
            var versionColumn = new Column("Version", "INTEGER", datasyncOperationsQueueTable);
            datasyncOperationsQueueTable.Columns.Add("Version", versionColumn);
            var pK_DatasyncOperationsQueue = new UniqueConstraint("PK_DatasyncOperationsQueue", datasyncOperationsQueueTable, new[] { idColumn0 });
            datasyncOperationsQueueTable.PrimaryKey = pK_DatasyncOperationsQueue;
            var pK_DatasyncOperationsQueueUc = RelationalModel.GetKey(this,
                "CommunityToolkit.Datasync.Client.Offline.DatasyncOperation",
                new[] { "Id" });
            pK_DatasyncOperationsQueue.MappedKeys.Add(pK_DatasyncOperationsQueueUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DatasyncOperationsQueueUc).Add(pK_DatasyncOperationsQueue);
            datasyncOperationsQueueTable.UniqueConstraints.Add("PK_DatasyncOperationsQueue", pK_DatasyncOperationsQueue);
            var iX_DatasyncOperationsQueue_ItemId_EntityType = new TableIndex(
            "IX_DatasyncOperationsQueue_ItemId_EntityType", datasyncOperationsQueueTable, new[] { itemIdColumn, entityTypeColumn }, false);
            var iX_DatasyncOperationsQueue_ItemId_EntityTypeIx = RelationalModel.GetIndex(this,
                "CommunityToolkit.Datasync.Client.Offline.DatasyncOperation",
                new[] { "ItemId", "EntityType" });
            iX_DatasyncOperationsQueue_ItemId_EntityType.MappedIndexes.Add(iX_DatasyncOperationsQueue_ItemId_EntityTypeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DatasyncOperationsQueue_ItemId_EntityTypeIx).Add(iX_DatasyncOperationsQueue_ItemId_EntityType);
            datasyncOperationsQueueTable.Indexes.Add("IX_DatasyncOperationsQueue_ItemId_EntityType", iX_DatasyncOperationsQueue_ItemId_EntityType);
            relationalModel.Tables.Add(("DatasyncOperationsQueue", null), datasyncOperationsQueueTable);
            var datasyncOperationsQueueTableMapping = new TableMapping(datasyncOperation, datasyncOperationsQueueTable, true);
            datasyncOperationsQueueTable.AddTypeMapping(datasyncOperationsQueueTableMapping, false);
            tableMappings0.Add(datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, datasyncOperation.FindProperty("Id")!, datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(entityTypeColumn, datasyncOperation.FindProperty("EntityType")!, datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(entityVersionColumn, datasyncOperation.FindProperty("EntityVersion")!, datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(httpStatusCodeColumn, datasyncOperation.FindProperty("HttpStatusCode")!, datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(itemColumn, datasyncOperation.FindProperty("Item")!, datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(itemIdColumn, datasyncOperation.FindProperty("ItemId")!, datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(kindColumn, datasyncOperation.FindProperty("Kind")!, datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(lastAttemptColumn, datasyncOperation.FindProperty("LastAttempt")!, datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(sequenceColumn, datasyncOperation.FindProperty("Sequence")!, datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(stateColumn, datasyncOperation.FindProperty("State")!, datasyncOperationsQueueTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, datasyncOperation.FindProperty("Version")!, datasyncOperationsQueueTableMapping);

            var todoItem = FindEntityType("TodoApp.MAUI.Models.TodoItem")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            todoItem.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var todoAppMAUIModelsTodoItemTableBase = new TableBase("TodoApp.MAUI.Models.TodoItem", null, relationalModel);
            var deletedColumnBase = new ColumnBase<ColumnMappingBase>("Deleted", "INTEGER", todoAppMAUIModelsTodoItemTableBase);
            todoAppMAUIModelsTodoItemTableBase.Columns.Add("Deleted", deletedColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", todoAppMAUIModelsTodoItemTableBase);
            todoAppMAUIModelsTodoItemTableBase.Columns.Add("Id", idColumnBase1);
            var isCompleteColumnBase = new ColumnBase<ColumnMappingBase>("IsComplete", "INTEGER", todoAppMAUIModelsTodoItemTableBase);
            todoAppMAUIModelsTodoItemTableBase.Columns.Add("IsComplete", isCompleteColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "TEXT", todoAppMAUIModelsTodoItemTableBase);
            todoAppMAUIModelsTodoItemTableBase.Columns.Add("Title", titleColumnBase);
            var updatedAtColumnBase = new ColumnBase<ColumnMappingBase>("UpdatedAt", "TEXT", todoAppMAUIModelsTodoItemTableBase)
            {
                IsNullable = true
            };
            todoAppMAUIModelsTodoItemTableBase.Columns.Add("UpdatedAt", updatedAtColumnBase);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("Version", "TEXT", todoAppMAUIModelsTodoItemTableBase)
            {
                IsNullable = true
            };
            todoAppMAUIModelsTodoItemTableBase.Columns.Add("Version", versionColumnBase0);
            relationalModel.DefaultTables.Add("TodoApp.MAUI.Models.TodoItem", todoAppMAUIModelsTodoItemTableBase);
            var todoAppMAUIModelsTodoItemMappingBase = new TableMappingBase<ColumnMappingBase>(todoItem, todoAppMAUIModelsTodoItemTableBase, true);
            todoAppMAUIModelsTodoItemTableBase.AddTypeMapping(todoAppMAUIModelsTodoItemMappingBase, false);
            defaultTableMappings1.Add(todoAppMAUIModelsTodoItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, todoItem.FindProperty("Id")!, todoAppMAUIModelsTodoItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedColumnBase, todoItem.FindProperty("Deleted")!, todoAppMAUIModelsTodoItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isCompleteColumnBase, todoItem.FindProperty("IsComplete")!, todoAppMAUIModelsTodoItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, todoItem.FindProperty("Title")!, todoAppMAUIModelsTodoItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updatedAtColumnBase, todoItem.FindProperty("UpdatedAt")!, todoAppMAUIModelsTodoItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, todoItem.FindProperty("Version")!, todoAppMAUIModelsTodoItemMappingBase);

            var tableMappings1 = new List<TableMapping>();
            todoItem.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var todoItemsTable = new Table("TodoItems", null, relationalModel);
            var idColumn1 = new Column("Id", "TEXT", todoItemsTable);
            todoItemsTable.Columns.Add("Id", idColumn1);
            var deletedColumn = new Column("Deleted", "INTEGER", todoItemsTable);
            todoItemsTable.Columns.Add("Deleted", deletedColumn);
            var isCompleteColumn = new Column("IsComplete", "INTEGER", todoItemsTable);
            todoItemsTable.Columns.Add("IsComplete", isCompleteColumn);
            var titleColumn = new Column("Title", "TEXT", todoItemsTable);
            todoItemsTable.Columns.Add("Title", titleColumn);
            var updatedAtColumn = new Column("UpdatedAt", "TEXT", todoItemsTable)
            {
                IsNullable = true
            };
            todoItemsTable.Columns.Add("UpdatedAt", updatedAtColumn);
            var versionColumn0 = new Column("Version", "TEXT", todoItemsTable)
            {
                IsNullable = true
            };
            todoItemsTable.Columns.Add("Version", versionColumn0);
            var pK_TodoItems = new UniqueConstraint("PK_TodoItems", todoItemsTable, new[] { idColumn1 });
            todoItemsTable.PrimaryKey = pK_TodoItems;
            var pK_TodoItemsUc = RelationalModel.GetKey(this,
                "TodoApp.MAUI.Models.TodoItem",
                new[] { "Id" });
            pK_TodoItems.MappedKeys.Add(pK_TodoItemsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TodoItemsUc).Add(pK_TodoItems);
            todoItemsTable.UniqueConstraints.Add("PK_TodoItems", pK_TodoItems);
            relationalModel.Tables.Add(("TodoItems", null), todoItemsTable);
            var todoItemsTableMapping = new TableMapping(todoItem, todoItemsTable, true);
            todoItemsTable.AddTypeMapping(todoItemsTableMapping, false);
            tableMappings1.Add(todoItemsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, todoItem.FindProperty("Id")!, todoItemsTableMapping);
            RelationalModel.CreateColumnMapping(deletedColumn, todoItem.FindProperty("Deleted")!, todoItemsTableMapping);
            RelationalModel.CreateColumnMapping(isCompleteColumn, todoItem.FindProperty("IsComplete")!, todoItemsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, todoItem.FindProperty("Title")!, todoItemsTableMapping);
            RelationalModel.CreateColumnMapping(updatedAtColumn, todoItem.FindProperty("UpdatedAt")!, todoItemsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, todoItem.FindProperty("Version")!, todoItemsTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
