<UserControl x:Class="TodoApp.Avalonia.Views.MainView"
             xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:services="clr-namespace:TodoApp.Avalonia.Services"
             xmlns:vm="clr-namespace:TodoApp.Avalonia.ViewModels"
             d:DesignWidth="500"
             d:DesignHeight="450"
             services:DialogManager.Register="{Binding }"
             Background="Transparent"
             Focusable="True"
             Design.DataContext="{x:Static vm:DesignTimeViewModels.TodoListDesignerViewModel}"
             x:DataType="vm:TodoListViewModel"
             mc:Ignorable="d">
    <Panel>
        <!-- The NotificationManager will show our Alerts -->
        <WindowNotificationManager x:Name="WindowNotificationManager"
                                   ZIndex="2" />
        
        <!--  We give a name to the root grid in order to access it later  -->
        <Grid x:Name="Root"
              RowDefinitions="Auto, *, Auto">

            <!--  This is our title text block. We use Style.Classes to style it accordingly  -->
            <Grid ColumnDefinitions="Auto,*">
                <TextBlock Classes="h1"
                           Text="My ToDo-List" />
                <Button Grid.Column="1"
                        Command="{Binding RefreshItemsCommand}">
                    <PathIcon Data="{DynamicResource RefreshIconData}" />
                </Button>
            </Grid>

            <ScrollViewer Grid.Row="1">
                <!--  This ItemsControl show all added ToDoItems.  -->
                <!--  It needs to be placed inside a ScrollViewer because other than a ListBox it doesn't have it's own  -->
                <ItemsControl ItemsSource="{Binding Items}">
                    <ItemsControl.ItemTemplate>
                        <!--  The ItemTemplate defines how each item should be represented  -->
                        <!--  Our Item will be represented by a CheckBox and a Delete-Button  -->
                        <DataTemplate DataType="vm:TodoItemViewModel">
                            <Grid ColumnDefinitions="*, Auto">
                                <CheckBox Content="{Binding Title}"
                                          IsChecked="{Binding IsComplete}" />

                                <!--  Note how we use the Root-Grid to get the MainViewModel here. As we use compiled bindings we have to cast the DataContext  -->
                                <!--  The command parameter is the local ToDoItemViewModel being processed  -->
                                <Button Grid.Column="1"
                                        Command="{Binding #Root.((vm:TodoListViewModel)DataContext).RemoveItemCommand}"
                                        CommandParameter="{Binding .}">
                                    <PathIcon Height="15"
                                              Data="{DynamicResource DeleteIconData}"
                                              Foreground="Red" />
                                </Button>
                            </Grid>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>

            <!--  This TextBox can be used to add new ToDoItems  -->
            <TextBox Grid.Row="2"
                     Text="{Binding NewItemContent}"
                     Watermark="Add a new Item">
                <TextBox.InnerRightContent>
                    <Button Command="{Binding AddItemCommand}">
                        <PathIcon Data="{DynamicResource AcceptIconData}"
                                  Foreground="Green" />
                    </Button>
                </TextBox.InnerRightContent>
                <!--  KeyBindings allow us to define KeyGestures  -->
                <TextBox.KeyBindings>
                    <KeyBinding Command="{Binding AddItemCommand}"
                                Gesture="Enter" />
                </TextBox.KeyBindings>
            </TextBox>
        </Grid>
    </Panel>
</UserControl>