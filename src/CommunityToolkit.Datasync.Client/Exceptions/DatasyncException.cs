// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Diagnostics.CodeAnalysis;

namespace CommunityToolkit.Datasync.Client;

/// <summary>
/// A baseline exception for all exceptions generated by the datasync system.
/// </summary>
[ExcludeFromCodeCoverage(Justification = "Standard exception constructors")]
public class DatasyncException : Exception
{
    /// <inheritdoc />
    public DatasyncException()
    {
    }

    /// <inheritdoc />
    public DatasyncException(string? message) : base(message)
    {
    }

    /// <inheritdoc />
    public DatasyncException(string? message, Exception? innerException) : base(message, innerException)
    {
    }

    /// <summary>
    /// A helper method to throw the <see cref="DatasyncException"/> if the value is null.
    /// </summary>
    /// <param name="value">The value to check.</param>
    /// <param name="message">The message for this exception.</param>
    /// <exception cref="DatasyncException">Thrown if <paramref name="value"/> is null.</exception>
    internal static void ThrowIfNull(object? value, string? message)
    {
        if (value is null)
        {
            throw new DatasyncException(message);
        }
    }

    /// <summary>
    /// A helper method to throw the <see cref="DatasyncException"/> if the value is null or empty.
    /// </summary>
    /// <param name="value">The value to check.</param>
    /// <param name="message">The message for this exception.</param>
    /// <exception cref="DatasyncException">Thrown if <paramref name="value"/> is null or empty.</exception>
    internal static void ThrowIfNullOrEmpty(string? value, string? message)
    {
        if (string.IsNullOrEmpty(value))
        {
            throw new DatasyncException(message);
        }
    }
}
