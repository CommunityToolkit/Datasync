// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using CommunityToolkit.Datasync.Client.Query.Linq;

namespace CommunityToolkit.Datasync.Client.Test.Query;

[ExcludeFromCodeCoverage]
public class ImplicitConversions_Tests
{
    [Theory]
    [InlineData(typeof(int?), typeof(int))]
    [InlineData(typeof(int), typeof(int))]
    public void Unwrap_UnwrapsNullableTypes(Type input, Type expected)
    {
        Type result = ImplicitConversions.Unwrap(input);
        result.Should().Be(expected);
    }

    [Theory]
    [InlineData(typeof(sbyte), typeof(decimal), true)]
    [InlineData(typeof(sbyte), typeof(double), true)]
    [InlineData(typeof(sbyte), typeof(float), true)]
    [InlineData(typeof(sbyte), typeof(int), true)]
    [InlineData(typeof(sbyte), typeof(long), true)]
    [InlineData(typeof(sbyte), typeof(nint), true)]
    [InlineData(typeof(sbyte), typeof(nuint), false)]
    [InlineData(typeof(sbyte), typeof(short), true)]
    [InlineData(typeof(sbyte), typeof(uint), false)]
    [InlineData(typeof(sbyte), typeof(ulong), false)]
    [InlineData(typeof(sbyte), typeof(ushort), false)]
    [InlineData(typeof(double), typeof(decimal), false)]
    [InlineData(typeof(double), typeof(double), true)]
    [InlineData(typeof(double), typeof(float), false)]
    [InlineData(typeof(double), typeof(int), false)]
    [InlineData(typeof(double), typeof(long), false)]
    [InlineData(typeof(double), typeof(nint), false)]
    [InlineData(typeof(double), typeof(nuint), false)]
    [InlineData(typeof(double), typeof(short), false)]
    [InlineData(typeof(double), typeof(uint), false)]
    [InlineData(typeof(double), typeof(ulong), false)]
    [InlineData(typeof(double), typeof(ushort), false)]
    [InlineData(typeof(float), typeof(decimal), false)]
    [InlineData(typeof(float), typeof(double), true)]
    [InlineData(typeof(float), typeof(float), true)]
    [InlineData(typeof(float), typeof(int), false)]
    [InlineData(typeof(float), typeof(long), false)]
    [InlineData(typeof(float), typeof(nint), false)]
    [InlineData(typeof(float), typeof(nuint), false)]
    [InlineData(typeof(float), typeof(short), false)]
    [InlineData(typeof(float), typeof(uint), false)]
    [InlineData(typeof(float), typeof(ulong), false)]
    [InlineData(typeof(float), typeof(ushort), false)]
    [InlineData(typeof(int), typeof(decimal), true)]
    [InlineData(typeof(int), typeof(double), true)]
    [InlineData(typeof(int), typeof(float), true)]
    [InlineData(typeof(int), typeof(int), true)]
    [InlineData(typeof(int), typeof(long), true)]
    [InlineData(typeof(int), typeof(nint), true)]
    [InlineData(typeof(int), typeof(nuint), false)]
    [InlineData(typeof(int), typeof(short), false)]
    [InlineData(typeof(int), typeof(uint), false)]
    [InlineData(typeof(int), typeof(ulong), false)]
    [InlineData(typeof(int), typeof(ushort), false)]
    [InlineData(typeof(long), typeof(decimal), true)]
    [InlineData(typeof(long), typeof(double), true)]
    [InlineData(typeof(long), typeof(float), true)]
    [InlineData(typeof(long), typeof(int), false)]
    [InlineData(typeof(long), typeof(long), true)]
    [InlineData(typeof(long), typeof(nint), false)]
    [InlineData(typeof(long), typeof(nuint), false)]
    [InlineData(typeof(long), typeof(short), false)]
    [InlineData(typeof(long), typeof(uint), false)]
    [InlineData(typeof(long), typeof(ulong), false)]
    [InlineData(typeof(long), typeof(ushort), false)]
    [InlineData(typeof(nint), typeof(decimal), true)]
    [InlineData(typeof(nint), typeof(double), true)]
    [InlineData(typeof(nint), typeof(float), true)]
    [InlineData(typeof(nint), typeof(int), false)]
    [InlineData(typeof(nint), typeof(long), true)]
    [InlineData(typeof(nint), typeof(nint), true)]
    [InlineData(typeof(nint), typeof(nuint), false)]
    [InlineData(typeof(nint), typeof(short), false)]
    [InlineData(typeof(nint), typeof(uint), false)]
    [InlineData(typeof(nint), typeof(ulong), false)]
    [InlineData(typeof(nint), typeof(ushort), false)]
    [InlineData(typeof(nuint), typeof(decimal), true)]
    [InlineData(typeof(nuint), typeof(double), true)]
    [InlineData(typeof(nuint), typeof(float), true)]
    [InlineData(typeof(nuint), typeof(int), false)]
    [InlineData(typeof(nuint), typeof(long), false)]
    [InlineData(typeof(nuint), typeof(nint), false)]
    [InlineData(typeof(nuint), typeof(nuint), true)]
    [InlineData(typeof(nuint), typeof(short), false)]
    [InlineData(typeof(nuint), typeof(uint), false)]
    [InlineData(typeof(nuint), typeof(ulong), true)]
    [InlineData(typeof(nuint), typeof(ushort), false)]
    [InlineData(typeof(short), typeof(decimal), true)]
    [InlineData(typeof(short), typeof(double), true)]
    [InlineData(typeof(short), typeof(float), true)]
    [InlineData(typeof(short), typeof(int), true)]
    [InlineData(typeof(short), typeof(long), true)]
    [InlineData(typeof(short), typeof(nint), true)]
    [InlineData(typeof(short), typeof(nuint), false)]
    [InlineData(typeof(short), typeof(short), true)]
    [InlineData(typeof(short), typeof(uint), false)]
    [InlineData(typeof(short), typeof(ulong), false)]
    [InlineData(typeof(short), typeof(ushort), false)]
    [InlineData(typeof(uint), typeof(decimal), true)]
    [InlineData(typeof(uint), typeof(double), true)]
    [InlineData(typeof(uint), typeof(float), true)]
    [InlineData(typeof(uint), typeof(int), false)]
    [InlineData(typeof(uint), typeof(long), true)]
    [InlineData(typeof(uint), typeof(nint), false)]
    [InlineData(typeof(uint), typeof(nuint), true)]
    [InlineData(typeof(uint), typeof(short), false)]
    [InlineData(typeof(uint), typeof(uint), true)]
    [InlineData(typeof(uint), typeof(ulong), true)]
    [InlineData(typeof(uint), typeof(ushort), false)]
    [InlineData(typeof(ulong), typeof(decimal), true)]
    [InlineData(typeof(ulong), typeof(double), true)]
    [InlineData(typeof(ulong), typeof(float), true)]
    [InlineData(typeof(ulong), typeof(int), false)]
    [InlineData(typeof(ulong), typeof(long), false)]
    [InlineData(typeof(ulong), typeof(nint), false)]
    [InlineData(typeof(ulong), typeof(nuint), false)]
    [InlineData(typeof(ulong), typeof(short), false)]
    [InlineData(typeof(ulong), typeof(uint), false)]
    [InlineData(typeof(ulong), typeof(ulong), true)]
    [InlineData(typeof(ulong), typeof(ushort), false)]
    [InlineData(typeof(ushort), typeof(decimal), true)]
    [InlineData(typeof(ushort), typeof(double), true)]
    [InlineData(typeof(ushort), typeof(float), true)]
    [InlineData(typeof(ushort), typeof(int), true)]
    [InlineData(typeof(ushort), typeof(long), true)]
    [InlineData(typeof(ushort), typeof(nint), true)]
    [InlineData(typeof(ushort), typeof(nuint), true)]
    [InlineData(typeof(ushort), typeof(short), false)]
    [InlineData(typeof(ushort), typeof(uint), true)]
    [InlineData(typeof(ushort), typeof(ulong), true)]
    [InlineData(typeof(ushort), typeof(ushort), true)]
    public void IsImplicitConversion_Validates(Type from, Type to, bool expected)
    {
        bool actual = ImplicitConversions.IsImplicitConversion(from, to);
        actual.Should().Be(expected);
    }
}
